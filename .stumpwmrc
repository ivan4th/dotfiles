;; -*-lisp-*-

(in-package :stumpwm)

(require 'swank)

;;(set-prefix-key (kbd "ISO_Level3_Shift"))

(defun home-file (filename)
  (merge-pathnames filename (user-homedir-pathname)))

(set-prefix-key (kbd "C-'"))

(setf *mode-line-position* :bottom)

(setf *honor-window-moves* nil) ;; don't allow Conky jump like mad

(defvar *default-layout-screen-width* nil)
(defvar *default-layout-screen-height* nil)
(defvar *k-map* (make-sparse-keymap))

(set-focus-color "darkmagenta")
;; (set-font "-microsoft-verdana-medium-r-normal--11-*-*-*-p-0-iso10646-*")
;; DejaVu is not available among X fonts in newer Ubuntus
;; (set-font "-dejavu-dejavu sans mono-medium-r-normal--11-*-*-*-*-*-iso10646-*")
(set-font "-misc-fixed-medium-r-normal--13-120-75-75-c-70-iso10646-1")

(defcommand (fprev tile-group) () ()
  "Cycle through the frame tree to the previous frame."
  (focus-prev-frame (current-group)))

(defmacro define-pull-raise-pairs (&body items)
  `(progn
     ,@(loop for item in items
             for %name = (if (consp item) (first item) item)
             for class = (if (consp item) (second item) (string-capitalize %name))
             for name = (if (symbolp %name) (string-downcase %name) %name)
             for command = (or (when (consp item) (third item)) name)
             collect
             `(defcommand ,(intern (format nil "P-~a" (string-upcase name))) () ()
                ,(format nil "Start ~a unless it is already running, ~
                              in which case pull it into the current frame."
                         name)
                (run-or-pull ,command '(:class ,class)))
             collect
             `(defcommand ,(intern (string-upcase name)) () ()
                ,(format nil "Start ~a unless it is already running, ~
                              in which case focus it." name)
                (run-or-raise ,command '(:class ,class))))))

(defvar *firefox-executable* "firefox")

(define-pull-raise-pairs
  emacs conkeror assistant vmware
  (firefox "Firefox" *firefox-executable*)
  (gnome-terminal "Gnome-terminal")
  (terminator "Terminator")
  (stalonetray "stalonetray")
  (google-chrome "Google-chrome"))

(defcommand sselect (to-screen) ((:number "Select Screen: "))
  "Select screen."
  (let ((screens (sort-screens)))
    (when (and to-screen (>= to-screen 0) (< to-screen (length screens)))
      (switch-to-screen (nth to-screen screens)))))

;; TBD: heads should be updated automagically!!!
(defcommand update-heads () ()
  "Update heads on current screen"
  (let* ((screen (current-screen))
         (old-heads (copy-list (screen-heads screen))))
    (setf (screen-heads screen) nil)
    (let ((new-heads (make-screen-heads screen (screen-root screen))))
      (setf (screen-heads screen) old-heads)
      (cond
        ((equalp old-heads new-heads)
         (dformat 3 "Bogus configure-notify on root window of ~S~%" screen) t)
        (t
         (dformat 1 "Updating Xinerama configuration for ~S.~%" screen)
         (if new-heads
             (progn
               (scale-screen screen new-heads)
               (mapc 'group-add-head (screen-groups screen))
               (update-mode-lines screen))
             (dformat 1 "Invalid configuration! ~S~%" new-heads)))))))

(defcommand swank () ()
  "Start SWANK"
  (let ((port (swank:create-server :coding-system "utf-8" :dont-close t)))
    (message "SWANK STARTED @ PORT ~s" port)))

(defmacro make-web-jump (name prefix)
  `(defcommand ,name (search) ((:rest ,(concatenate 'string (symbol-name name)
                                                    " search: ")))
     ,(format nil "Web jump: ~a" prefix)
     (substitute #\+ #\Space search)
     (run-shell-command (concatenate 'string ,prefix search))))

(make-web-jump google "conkeror http://www.google.fr/search?q=")

(let ((week-days '("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun")))
  (defun format-datetime ()
    (multiple-value-bind (second minute hour day month year day-of-week)
        (decode-universal-time (get-universal-time))
      (with-standard-io-syntax
          (format nil "~a ~4,'0d-~2,'0d-~2,'0d ~2,'0d:~2,'0d:~2,'0d"
                  (nth day-of-week week-days) year month day
                  hour minute second)))))

(setf stumpwm:*screen-mode-line-format*
      (list "[^B%n^b]  " '(:eval (format-datetime)) " | %W"))

(defparameter *simple-resize-increment* 100)

;; window placement
#+nil
(defcommand layout-etc () ()
  "Layout with Emacs, terminal and conkeror"
  (restore-group (current-group)
                 (make-gdump :number 1 :name "default"
                             :tree (list
                                    (list
                                     (make-fdump :number 0 :x 0 :y 0 :width 1680 :height 525
                                                 :windows nil :current nil)
                                     (list
                                      (make-fdump :number 1 :x 0 :y 525 :width 840 :height 525
                                                  :windows nil :current nil)
                                      (make-fdump
                                       :number 4 :x 840 :y 525 :width 840 :height 525
                                       :windows nil :current nil))))
                             :current 0))
  (setf *window-placement-rules*
        '(("Default" 4 T T :CLASS "Conkeror" :INSTANCE "Navigator" :TITLE NIL :ROLE
           "browser")
          ("Default" 1 T T :CLASS "Gnome-terminal" :INSTANCE "gnome-terminal" :TITLE NIL
           :ROLE "gnome-terminal-window-12785--1394073183-1274533966")
          ("Default" 0 T T :CLASS "Emacs" :INSTANCE "emacs" :TITLE NIL :ROLE NIL)
          #+nil ("Default" 2 T T :CLASS "Argv0dummy" :INSTANCE "argv0dummy" :TITLE NIL :ROLE nil)))
  (place-existing-windows))

(defcommand rule-them-all () ()
  "Make rules for all currently active windows"
  (clear-window-placement-rules)
  (dolist (w (all-windows))
    (make-rule-for-window w t)))

(defcommand layout-base () ()
  "Arrange windows according to the default desktop placement"
  (let ((desktop-file (home-file ".stumpwm-desktop-base"))
        (window-file (home-file ".stumpwm-windows-base")))
    (cond ((not (probe-file desktop-file))
           (message "~s not found" desktop-file))
          ((not (probe-file window-file))
           (message "~s not found" window-file))
          (t
           (restore-from-file desktop-file)
           (restore-window-placement-rules window-file)
           (place-existing-windows)))))

;; key bindings

(flet ((dk (k c)
         (define-key *top-map* k (format nil c *simple-resize-increment*))))
  (dk (kbd "s-Up") "resize 0 -~D")
  (dk (kbd "s-Down") "resize 0 ~D")
  (dk (kbd "s-Left") "resize -~D 0")
  (dk (kbd "s-Right") "resize ~D 0"))

(define-key *top-map* (kbd "s-k") '*k-map*)
(define-key *top-map* (kbd "s-0") "select-window-by-number 0")
(define-key *top-map* (kbd "s-1") "select-window-by-number 1")
(define-key *top-map* (kbd "s-2") "select-window-by-number 2")
(define-key *top-map* (kbd "s-3") "select-window-by-number 3")
(define-key *top-map* (kbd "s-4") "select-window-by-number 4")
(define-key *top-map* (kbd "s-5") "select-window-by-number 5")
(define-key *top-map* (kbd "s-6") "select-window-by-number 6")
(define-key *top-map* (kbd "s-7") "select-window-by-number 7")
(define-key *top-map* (kbd "s-8") "select-window-by-number 8")
(define-key *top-map* (kbd "s-9") "select-window-by-number 9")
(define-key *top-map* (kbd "s-F1") "gselect 1")
(define-key *top-map* (kbd "s-F2") "gselect 2")
(define-key *top-map* (kbd "s-F3") "gselect 3")
(define-key *top-map* (kbd "s-F4") "gselect 4")
(define-key *top-map* (kbd "s-F5") "gselect 5")
(define-key *top-map* (kbd "s-F6") "gselect 6")
(define-key *top-map* (kbd "s-F7") "gselect 7")
(define-key *top-map* (kbd "s-F8") "gselect 8")
(define-key *top-map* (kbd "s-F9") "gselect 9")
(define-key *top-map* (kbd "s-s") "vsplit")
(define-key *k-map* (kbd "s-s") "hsplit")
(define-key *top-map* (kbd "s-[") "fprev")
(define-key *top-map* (kbd "s-]") "fnext")
(define-key *top-map* (kbd "s-o") "fnext")
(define-key *top-map* (kbd "s-n") "fnext")
(define-key *top-map* (kbd "s-p") "fprev")
(define-key *k-map* (kbd "s-n") "pull-hidden-next")
#+nil(define-key *k-map* (kbd "s-p") "pull-hidden-prev")
(define-key *top-map* (kbd "s-c") "remove")
(define-key *top-map* (kbd "s-r") "iresize")
(define-key *top-map* (kbd "F2") "exec terminator")
(define-key *top-map* (kbd "s-RET") "fullscreen")

(define-key *k-map* (kbd "s-c") "p-conkeror")
(define-key *k-map* (kbd "s-g") "p-terminator")
(define-key *k-map* (kbd "s-e") "p-emacs")
(define-key *k-map* (kbd "s-f") "p-firefox")
(define-key *k-map* (kbd "s-h") "p-google-chrome")
(define-key *k-map* (kbd "s-t") "p-stalonetray")
(define-key *k-map* (kbd "s-/") "p-assistant")
(define-key *k-map* (kbd "s-v") "p-vmware")

(define-key *k-map* (kbd "c") "conkeror")
(define-key *k-map* (kbd "g") "terminator")
(define-key *top-map* (kbd "s-q") "terminator")
(define-key *top-map* (kbd "s-\\") "terminator")
(define-key *k-map* (kbd "e") "emacs")
(define-key *top-map* (kbd "s-e") "emacs")
(define-key *k-map* (kbd "f") "firefox")
(define-key *k-map* (kbd "h") "google-chrome")
(define-key *top-map* (kbd "s-f") "firefox")
(define-key *top-map* (kbd "s-h") "google-chrome")
(define-key *k-map* (kbd "t") "stalonetray")
(define-key *top-map* (kbd "s-/") "assistant")
(define-key *k-map* (kbd "v") "vmware")
(define-key *top-map* (kbd "s-v") "vmware")

(define-key *top-map* (kbd "s-g") "google")
#+nil(define-key *top-map* (kbd "s-F4") "delete")
(define-key *k-map* (kbd "s-k") "delete")
(define-key *top-map* (kbd "s-x") "colon")
(define-key *top-map* (kbd "s-w") "windowlist")

(define-key *top-map* (kbd "s-t") "mark")
(define-key *k-map* (kbd "s-a") "pull-marked")

(define-key *top-map* (kbd "s-z") "exec")
(define-key *top-map* (kbd "s-l") "exec gnome-screensaver-command -l")

(define-key *top-map* (kbd "s-F12") "exec gnome-session-save --logout")

#+sbcl
(let ((stumpwmrc-local (home-file ".stumpwmrc.local")))
  (when (probe-file stumpwmrc-local)
    (load stumpwmrc-local)))

(setf *mouse-focus-policy* :click)
(setf *new-frame-action* nil)

(mode-line)
(when (and *default-layout-screen-width*
           *default-layout-screen-height*
           (= 1 (length *screen-list*))
           (= *default-layout-screen-width* (screen-width (first *screen-list*)))
           (= *default-layout-screen-height* (screen-height (first *screen-list*))))
  (layout-base))

;; start some programs
#+nil
(mapc #'run-shell-command
      '("stalonetray --window-type normal"
        "conky"
        "gnome-terminal -e screen&"
        "conkeror"
        "emacs"))
